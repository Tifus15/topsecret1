Config file content:
{'model': 'GAT', 'sob': [True, True], 'sob_a': [1.0, 1.0, 1.0], 'a': 0.01, 'opti': 'adamW', 'reg': 'none', 'loss': 'Huber', 'acts': ['tanh', None], 'epochs': 5, 'modelsize': 256, 'batchsize': 128, 'timesize': 32, 'lr': 0.001, 'split': 0.9, 'device': 'cpu', 'single': False, 'noloops': True, 'samples': 50}
5
torch.Size([128, 50, 1, 9])
50
torch.Size([32, 1, 8])
GNN_maker_HNN(
  (net): Sequential(
    (0): GATLayer(
      (fc): Linear(in_features=2, out_features=128, bias=False)
      (attn_fc): Linear(in_features=256, out_features=1, bias=False)
    )
    (1): Tanh()
    (2): GATLayer(
      (fc): Linear(in_features=128, out_features=6, bias=False)
      (attn_fc): Linear(in_features=12, out_features=1, bias=False)
    )
  )
)
TRAIN BATCHES : 33
TEST BATCHES : 3
TRAIN
torch.Size([32, 256, 2])
torch.Size([32, 256, 2])
torch.Size([32, 128])
Graph(num_nodes=8192, num_edges=8192,
      ndata_schemes={}
      edata_schemes={})
torch.Size([8192, 2])
torch.Size([1, 4096])
torch.Size([4096, 1])
  0%|                                                                                                                                                    | 0/5 [00:00<?, ?it/s]
  0%|                                                                                                                                                   | 0/33 [00:00<?, ?it/s]
torch.Size([32, 256, 2])
torch.Size([32, 256, 2])
torch.Size([32, 128])
Graph(num_nodes=8192, num_edges=8192,
      ndata_schemes={'z': Scheme(shape=(6,), dtype=torch.float32), 'temp': Scheme(shape=(6,), dtype=torch.float32)}
      edata_schemes={'e': Scheme(shape=(1,), dtype=torch.float32)})

  3%|████▏                                                                                                                                      | 1/33 [00:05<02:42,  5.07s/it]
torch.Size([1, 4096])
  0%|                                                                                                                                                    | 0/5 [00:08<?, ?it/s]
Traceback (most recent call last):
  File "/home/denis/Desktop/server-graph-models/new_HGNN/main_pend.py", line 953, in <module>
    train2dof(configs)
  File "/home/denis/Desktop/server-graph-models/new_HGNN/main_pend.py", line 450, in train2dof
    x_pred = RKroll_for_learning(model,x0,ts)
  File "/home/denis/Desktop/server-graph-models/new_HGNN/utils.py", line 162, in RKroll_for_learning
    K4 = evaluate_model(model,out_l[i-1].squeeze()+dt*K3)
  File "/home/denis/Desktop/server-graph-models/new_HGNN/utils.py", line 148, in evaluate_model
    h_pred = model(x)
  File "/home/denis/anaconda3/envs/dgl_hnn/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/denis/anaconda3/envs/dgl_hnn/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1582, in _call_impl
    result = forward_call(*args, **kwargs)
  File "/home/denis/Desktop/server-graph-models/new_HGNN/HGNN.py", line 160, in forward
    gs = dgl.unbatch(self.g_hnn)
  File "/home/denis/anaconda3/envs/dgl_hnn/lib/python3.9/site-packages/dgl/batch.py", line 424, in unbatch
    gs = [
  File "/home/denis/anaconda3/envs/dgl_hnn/lib/python3.9/site-packages/dgl/batch.py", line 425, in <listcomp>
    convert.heterograph(edge_dict, num_nodes_dict, idtype=g.idtype)
  File "/home/denis/anaconda3/envs/dgl_hnn/lib/python3.9/site-packages/dgl/convert.py", line 369, in heterograph
    g = create_from_edges(
  File "/home/denis/anaconda3/envs/dgl_hnn/lib/python3.9/site-packages/dgl/convert.py", line 2064, in create_from_edges
    return DGLGraph(hgidx, [utype], [etype])
  File "/home/denis/anaconda3/envs/dgl_hnn/lib/python3.9/site-packages/dgl/heterograph.py", line 124, in __init__
    self._init(gidx, ntypes, etypes, node_frames, edge_frames)
  File "/home/denis/anaconda3/envs/dgl_hnn/lib/python3.9/site-packages/dgl/heterograph.py", line 206, in _init
    edge_frames = [
  File "/home/denis/anaconda3/envs/dgl_hnn/lib/python3.9/site-packages/dgl/heterograph.py", line 207, in <listcomp>
    Frame(num_rows=self._graph.num_edges(i)) if frame is None else frame
KeyboardInterrupt