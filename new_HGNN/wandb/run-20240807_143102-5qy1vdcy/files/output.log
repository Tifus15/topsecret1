Config file content:
{'model': 'GAT', 'sob': [True, True], 'sob_a': [1.0, 0.15], 'a': 0.01, 'opti': 'adamW', 'reg': 'none', 'loss': 'Huber', 'acts': ['tanh', None], 'epochs': 50, 'modelsize': 256, 'batchsize': 128, 'timesize': 32, 'lr': 0.001, 'split': 0.9, 'device': 'cpu', 'single': False, 'noloops': True, 'samples': 15}
50
GNN_maker_HNN(
  (net): Sequential(
    (0): GATLayer(
      (fc): Linear(in_features=2, out_features=128, bias=False)
      (attn_fc): Linear(in_features=256, out_features=1, bias=False)
    )
    (1): Tanh()
    (2): GATLayer(
      (fc): Linear(in_features=128, out_features=6, bias=False)
      (attn_fc): Linear(in_features=12, out_features=1, bias=False)
    )
  )
)
torch.Size([128, 15, 1, 5])
15
torch.Size([32, 1, 4])
GNN_maker_HNN(
  (net): Sequential(
    (0): GATLayer(
      (fc): Linear(in_features=2, out_features=128, bias=False)
      (attn_fc): Linear(in_features=256, out_features=1, bias=False)
    )
    (1): Tanh()
    (2): GATLayer(
      (fc): Linear(in_features=128, out_features=6, bias=False)
      (attn_fc): Linear(in_features=12, out_features=1, bias=False)
    )
  )
)
TRAIN BATCHES : 10
TEST BATCHES : 1
TRAIN
  0%|                                                                                                                                                   | 0/50 [00:00<?, ?it/s]


  0%|                                                                                                                                                   | 0/50 [00:13<?, ?it/s]
Traceback (most recent call last):
  File "/home/denis/Desktop/server-graph-models/new_HGNN/main_pend.py", line 991, in <module>
    train1dof(configs)
  File "/home/denis/Desktop/server-graph-models/new_HGNN/main_pend.py", line 208, in train1dof
    x_pred = RKroll_for_learning(model,x0,ts)
  File "/home/denis/Desktop/server-graph-models/new_HGNN/utils.py", line 160, in RKroll_for_learning
    K2 = evaluate_model(model,out_l[i-1].squeeze()+dt*K1/2)
  File "/home/denis/Desktop/server-graph-models/new_HGNN/utils.py", line 148, in evaluate_model
    h_pred = model(x)
  File "/home/denis/anaconda3/envs/dgl_hnn/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/denis/anaconda3/envs/dgl_hnn/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1582, in _call_impl
    result = forward_call(*args, **kwargs)
  File "/home/denis/Desktop/server-graph-models/new_HGNN/HGNN.py", line 160, in forward
    gs = dgl.unbatch(self.g_hnn)
  File "/home/denis/anaconda3/envs/dgl_hnn/lib/python3.9/site-packages/dgl/batch.py", line 424, in unbatch
    gs = [
  File "/home/denis/anaconda3/envs/dgl_hnn/lib/python3.9/site-packages/dgl/batch.py", line 425, in <listcomp>
    convert.heterograph(edge_dict, num_nodes_dict, idtype=g.idtype)
  File "/home/denis/anaconda3/envs/dgl_hnn/lib/python3.9/site-packages/dgl/convert.py", line 369, in heterograph
    g = create_from_edges(
  File "/home/denis/anaconda3/envs/dgl_hnn/lib/python3.9/site-packages/dgl/convert.py", line 2064, in create_from_edges
    return DGLGraph(hgidx, [utype], [etype])
  File "/home/denis/anaconda3/envs/dgl_hnn/lib/python3.9/site-packages/dgl/heterograph.py", line 124, in __init__
    self._init(gidx, ntypes, etypes, node_frames, edge_frames)
  File "/home/denis/anaconda3/envs/dgl_hnn/lib/python3.9/site-packages/dgl/heterograph.py", line 198, in _init
    node_frames = [
  File "/home/denis/anaconda3/envs/dgl_hnn/lib/python3.9/site-packages/dgl/heterograph.py", line 199, in <listcomp>
    Frame(num_rows=self._graph.num_nodes(i)) if frame is None else frame
  File "/home/denis/anaconda3/envs/dgl_hnn/lib/python3.9/site-packages/dgl/frame.py", line 588, in __init__
    def __init__(self, data=None, num_rows=None):
KeyboardInterrupt